@page "/"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Models.DTO
@using ClientBlazor_v1.Models.RoomObjects
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.Utils
@using ClientBlazor_v1.ViewModels

<PageTitle>Liste des salles</PageTitle>

<div class="m-3 d-flex flex-column align-items-center">
    <h3>Liste des salles</h3>

    <div class="building_container">
        @if(BuildingListVM.BuildingDTOs is null)
        {
            <div class="spinner-border" role="status"></div>
        }
        else
        {
            <div class="d-flex flex-column align-items-center">
                <div class="d-flex" style="gap: 1em;">
                    <a href="/edit_building">Ajouter un bâtiment</a>
                    <a href="/edit_room">Ajouter une salle</a>
                </div>

                <span>Bâtiments : <b>@BuildingListVM.BuildingDTOs.Count</b></span>
                <span>Salles : <b>@BuildingListVM.BuildingDTOs.Sum(b => b.Rooms.Count)</b></span>
            </div>

            @foreach (var building in BuildingListVM.BuildingDTOs)
            {
                <div class="building rounded shadow">
                    <div class="building_header" onclick="onHeaderCollapseClick(this)">
                        <span><b>@building.Name</b></span>
                        <hr />
                        <span>@building.Rooms.Count salles</span>
                    </div>
                    <div class="building_content">
                        <div class="d-flex" style="gap: 1em;">
                            <a class="btn btn-primary" title="Modifier le bâtiment" href="/edit_building?BuildingId=@building.Id"><i class="bi bi-pen"></i></a>
                            <button class="btn btn-danger" title="Supprimer le bâtiment" @onclick="() => Click_DeleteBuilding(building)"><i class="bi bi-trash"></i></button>
                        </div>
                        <hr />
                        <div class="room_list">
                            @foreach (var room in building.Rooms)
                            {
                                RoomObjectSorter<RoomObject> roomObjects = RoomObjectSorter<RoomObject>.SortObjects(room.EmptyObjects ?? new(), obj => obj);

                                <div class="room collapsed">
                                    <div class="room_header" onclick="onHeaderCollapseClick(this)">
                                        <span><b>@room.Name</b> <i>[@room.RoomTypeName]</i></span>
                                        <hr />
                                        <span>@roomObjects.Sensors.Count capteurs</span>
                                    </div>
                                    <div class="room_content">
                                        <div class="room_description">
                                            <div>
                                                <b>Capteurs (@roomObjects.Sensors.Count)</b>
                                                <ul>
                                                    @foreach (var sensor in GetGroupedNames(roomObjects.Sensors.Select(s => s.GetFullName())) )
                                                    {
                                                        <li>@sensor</li>
                                                    }
                                                </ul>
                                            </div>
                                            <div>
                                                <b>Actionneurs (@roomObjects.Actionnables.Count)</b>
                                                <ul>
                                                    @foreach (var actionnable in GetGroupedNames(roomObjects.Actionnables.Select(s => s.GetFullName())) )
                                                    {
                                                        <li>@actionnable</li>
                                                    }
                                                </ul>
                                            </div>
                                            <div>
                                                <b>Equipements (@roomObjects.Equipments.Count)</b>
                                                <ul>
                                                    @foreach (var equipment in GetGroupedNames(roomObjects.Equipments.Select(s => s.GetRootName())) )
                                                    {
                                                        <li>@equipment</li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>

                                        <div class="bottom_bar">
                                            <a class="btn btn-primary" title="Modifier les objets de la salle" href="/renderer?RoomId=@room.Id"><i class="bi bi-box"></i></a>
                                            <a class="btn btn-primary" title="Modifier la salle" href="/edit_room?RoomId=@room.Id"><i class="bi bi-pen"></i></a>
                                            <button class="btn btn-danger" title="Supprimer la salle" @onclick="() => Click_DeleteRoom(room)"><i class="bi bi-trash"></i></button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>   
            }
        }
    </div>
</div>

<Modal @ref="_deleteBuildingModal">
    <Title>Supprimer le bâtiment ?</Title>
    <Content>
        <p>
            Êtes-vous sûr de vouloir supprimer le bâtiment ?
            <br />
            - <b>@_buildingToDelete!.Name</b>
        </p>
    </Content>
    <Buttons>
        <button class="btn btn-danger" @onclick="Click_DeleteBuildingConfirmed">Supprimer</button>
        <button class="btn btn-secondary" @onclick="_deleteBuildingModal.Close">Annuler</button>
    </Buttons>
</Modal>

<Modal @ref="_deleteRoomModal">
    <Title>Supprimer la salle ?</Title>
    <Content>
        <p>
            Êtes-vous sûr de vouloir supprimer la salle ?
            <br />
            - @_roomToDelete!.BuildingDTO?.Name : <b>@_roomToDelete.Name</b>
        </p>
    </Content>
    <Buttons>
        <button class="btn btn-danger" @onclick="Click_DeleteRoomConfirmed">Supprimer</button>
        <button class="btn btn-secondary" @onclick="_deleteRoomModal.Close">Annuler</button>
    </Buttons>
</Modal>

<script type="text/javascript">
    function onHeaderCollapseClick(btn){
    btn.parentNode.classList.toggle("collapsed");
    }
</script>

@inject IService<Building> buildingService;
@inject IDTOService dtoService;
@inject IService<Room> roomService;
@code {
    public BuildingListVM BuildingListVM { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BuildingListVM = new(buildingService, roomService, dtoService);
        await BuildingListVM.LoadBuildings();
    }

    // Delete building modal
    private Modal _deleteBuildingModal;
    private BuildingListElementDTO? _buildingToDelete;

    public void Click_DeleteBuilding(BuildingListElementDTO building)
    {
        _buildingToDelete = building;
        _deleteBuildingModal.Open();
    }

    public async Task Click_DeleteBuildingConfirmed()
    {
        _deleteBuildingModal.Close();
        await BuildingListVM.DeleteBuilding(_buildingToDelete);
    }

    // Delete room modal
    private Modal _deleteRoomModal;
    private BuildingListRoomDTO? _roomToDelete;

    public void Click_DeleteRoom(BuildingListRoomDTO room)
    {
        _roomToDelete = room;
        _deleteRoomModal.Open();
    }

    public async Task Click_DeleteRoomConfirmed()
    {
        _deleteRoomModal.Close();
        await BuildingListVM.DeleteRoom(_roomToDelete);
    }

    public IEnumerable<string> GetGroupedNames(IEnumerable<string> names)
    {
        Dictionary<string, int> groupedNames = new();

        foreach (string name in names)
        {
            if (!groupedNames.ContainsKey(name)) groupedNames[name] = 0;
            groupedNames[name]++;
        }

        return groupedNames.Select(kvp => kvp.Value > 1 ? $"(x{kvp.Value}) {kvp.Key}" : kvp.Key);
    }
}


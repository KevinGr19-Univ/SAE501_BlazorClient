@page "/"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Models.RoomObjects
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.Utils
@using ClientBlazor_v1.ViewModels

<PageTitle>Liste des salles</PageTitle>

<div class="m-3 d-flex flex-column align-items-center">
    <h3>Liste des salles</h3>

    <div class="building_container">
        @if(BuildingListVM.Buildings is null)
        {
            <div class="spinner-border" role="status"></div>
        }
        else
        {
            <div class="d-flex flex-column align-items-center">
                <div class="d-flex" style="gap: 1em;">
                    <a href="/edit_building">Ajouter un bâtiment</a>
                    <a href="/edit_room">Ajouter une salle</a>
                </div>

                <span>Bâtiments : <b>@BuildingListVM.Buildings.Count</b></span>
                <span>Salles : <b>@BuildingListVM.Buildings.Sum(b => b.Rooms.Count)</b></span>
            </div>

            @foreach(var building in BuildingListVM.Buildings)
            {
                <div class="building rounded shadow">
                    <div class="building_header" onclick="onHeaderCollapseClick(this)">
                        <span><b>@building.Name</b></span>
                        <hr />
                        <span>@building.Rooms.Count salles</span>
                    </div>
                    <div class="room_list">
                        @foreach(var room in building.Rooms)
                        {
                            RoomObjectSorter<RoomObject> roomObjects = RoomObjectSorter<RoomObject>.SortObjects(room.ObjectsOfRoom ?? new(), obj => obj);

                            <div class="room collapsed">
                                <div class="room_header" onclick="onHeaderCollapseClick(this)">
                                    <span><b>@room.Name</b> <i>[@(room.RoomType?.Name ?? "null")]</i></span>
                                    <hr />
                                    <span>@roomObjects.Sensors.Count capteurs</span>
                                </div>
                                <div class="room_content">
                                    <div class="room_description">
                                        <div>
                                            <b>Capteurs (@roomObjects.Sensors.Count)</b>
                                            <ul>
                                                @foreach (var sensor in roomObjects.Sensors)
                                                {
                                                    <li>@sensor.GetRootName()</li>
                                                }
                                            </ul>
                                        </div>
                                        <div>
                                            <b>Actionneurs (@roomObjects.Actionnables.Count)</b>
                                            <ul>
                                                @foreach (var actionnable in roomObjects.Actionnables)
                                                { 
                                                    <li>@actionnable.GetRootName()</li>
                                                }
                                            </ul>
                                        </div>
                                        <div>
                                            <b>Equipements (@roomObjects.Equipments.Count)</b>
                                            <ul>
                                                @foreach (var equipment in roomObjects.Equipments)
                                                {
                                                    <li>@equipment.GetRootName()</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>

                                    <div class="bottom_bar">
                                        <a class="btn btn-primary" href="/renderer?RoomId=@room.Id">Modifier</a>
                                        <a class="btn btn-danger">Supprimer</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<script type="text/javascript">
    function onHeaderCollapseClick(btn){
    btn.parentNode.classList.toggle("collapsed");
    }
</script>

@inject IService<Building> buildingService;
@code {
    public BuildingListVM BuildingListVM { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BuildingListVM = new(buildingService);
        await BuildingListVM.LoadBuildings();
    }
}

<style>
    .building_container {
        margin: 1em;
        display: flex;
        flex-direction: column;
        gap: 2em;
    }

    .building_header, .room_list {
        padding: 1em;
    }

    .building_header, .room_header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1em;
        cursor: pointer;
    }

        .building_header > hr, .room_header > hr {
            flex: 1;
            min-width: 2em;
        }

    .room_header, .room_content {
        padding: 0.4em;
    }

    .room_content {
        border-top: solid 1px #AAA7;
    }

    .building_header:hover, .room_header:hover {
        background: #EEE;
    }

    .room_list {
        border-top: solid 1px #8888;
        padding-left: 2em;
    }

    .room_header::before {
        content: '▾';
        font-weight: bold;
        font-size: 1.5em;
    }

    .room_description {
        display: flex;
        justify-content: space-around;
        gap: 1em;
    }

    .bottom_bar {
        display: flex;
        gap: 1em;
        justify-content: end;
        padding: 0.4em;
    }

    .building.collapsed > .room_list, .room.collapsed > .room_content {
        display: none;
    }

    .collapsed > .room_header::before{
        content: '▸'
    }

</style>
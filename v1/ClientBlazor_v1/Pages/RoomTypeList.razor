@page "/room_types"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Models.DTO
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.ViewModels

<div class="m-3 d-flex flex-column align-items-center">
    <h3>Liste des types de salle</h3>

    @if(ListVM.RoomTypeDTOs is null)
    {
        <div class="spinner-border" role="status"></div>
    }
    else
    {
        <div class="mt-4 d-flex flex-column align-items-center">
            <p>Types : <b>@ListVM.RoomTypeDTOs.Count</b></p>
            <div class="d-flex flex-column align-items-center" style="gap: 1em;">
                @foreach(var roomType in ListVM.RoomTypeDTOs)
                {
                    if (roomType.Id == EditVM.RoomType?.Id) continue;

                    <div class="p-2 rounded shadow d-flex flex-column roomtype-card collapsed">
                        <div class="d-flex align-items-center roomtype-card-header" style="gap: 1em;">
                            <div class="d-flex flex-column" style="cursor: pointer;" onclick="onTypeCollapseClick(this)">
                                <span>#@roomType.Id - <b>@roomType.Name</b></span>
                                <i>@roomType.Rooms.Count salles</i>
                            </div>
                            <div class="roomtype-card-hover d-flex align-items-center" style="gap: 0.5em;">
                                <button class="btn btn-primary" title="Modifier le type de salle"
                                    @onclick="() => Click_EditType(roomType)" @onclick:stopPropagation=true><i class="bi bi-pen"></i></button>
                                <button class="btn btn-danger" title="Supprimer le type de salle"
                                    @onclick="() => Click_DeleteType(roomType)" @onclick:stopPropagation=true><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                        <hr class="roomtype-card-collapse"/>
                        <ul class="roomtype-card-collapse pe-2">
                            @foreach(var room in roomType.Rooms)
                            {
                                <li>@room.BuildingName - <b>@room.Name</b></li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>

        <div>
            <EditForm Model="@EditVM.RoomType" OnValidSubmit="Click_SaveChanges" class="mt-4 p-2 rounded bg-white shadow d-flex flex-column align-items-center" style="gap: 0.5em;">
                <b class="text-center">@(EditVM.IsNew ? "Créer un type" : "Modifier un type")</b>

                <DataAnnotationsValidator/>
                <ValidationSummary/>

                @if(!EditVM.IsNew)
                {
                    <span>ID: <b>@EditVM.RoomType.Id</b></span>
                }
                <div class="input-box align-self-center">
                    <label for="room-type-name">Nom</label>
                    <InputText id="room-type-name" @bind-value=EditVM.RoomType.Name />
                </div>

                <div class="d-flex align-items-center" style="gap: 0.5em;">
                    <button type="submit" class="btn btn-success align-self-center">Sauvegarder</button>
                    <button @onclick=Click_CancelChanges class="btn btn-secondary align-self-center">Annuler</button>
                </div>
            </EditForm>
        </div>
    }

    <Modal @ref=_roomTypeDeleteModal>
        <Title>Supprimer le type de salle</Title>
        <Content>
            <p>Voulez vous vraiment supprimer le type de salle suivant ?</p>
            <p>#@_roomTypeToDelete!.Id - <b>@_roomTypeToDelete.Name</b></p>
        </Content>
        <Buttons>
            <button type="button" class="btn btn-danger" @onclick=Click_DeleteTypeConfirmed>Supprimer</button>
            <button type="button" class="btn btn-secondary" @onclick=_roomTypeDeleteModal.Close>Annuler</button>
        </Buttons>
    </Modal>
</div>

<script>
    function onTypeCollapseClick(e){
        $(e).closest(".roomtype-card").toggleClass("collapsed");
    }
</script>

<style>
    .roomtype-card:not(:hover) .roomtype-card-hover {
    display: none !important;
    }

    .roomtype-card-hover button {
    padding: 0.2em;
    }

    .roomtype-card-header {
    user-select: none;
    }

    .roomtype-card.collapsed .roomtype-card-collapse{
    display: none !important;
    }

    .roomtype-card-header::before{
    content: '▾';
    font-weight: bold;
    font-size: 1.5em;
    }

    .roomtype-card.collapsed .roomtype-card-header::before{
    content: '▸';
    }
</style>

@inject IService<RoomType> roomTypeService;
@inject IDTOService dtoService;
@code {
    public RoomTypeListVM ListVM { get; set; }
    public RoomTypeEditVM EditVM { get; set; }

    private Modal _roomTypeDeleteModal;
    private RoomTypeDTO? _roomTypeToDelete;

    protected override async Task OnInitializedAsync()
    {
        ListVM = new(roomTypeService, dtoService);
        EditVM = new(roomTypeService);

        await ListVM.Load();
    }

    public void Click_EditType(RoomTypeDTO roomTypeDto)
    {
        EditVM.SetExistingModel(roomTypeDto);
    }

    public async Task Click_SaveChanges()
    {
        await EditVM.Save();
        EditVM.SetNewModel();
        await ListVM.Load();
    }

    public void Click_CancelChanges()
    {
        EditVM.SetNewModel();
    }

    public void Click_DeleteType(RoomTypeDTO roomTypeDto)
    {
        _roomTypeToDelete = roomTypeDto;
        _roomTypeDeleteModal.Open();
    }

    public async Task Click_DeleteTypeConfirmed()
    {
        if (_roomTypeToDelete is null) return;

        _roomTypeDeleteModal.Close();
        await ListVM.DeleteRoomType(_roomTypeToDelete);
        await ListVM.Load();
    }
}
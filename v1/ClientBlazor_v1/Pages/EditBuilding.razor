@page "/edit_building"
@using BlazorBootstrap
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Components.Utils
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.Utils
@using ClientBlazor_v1.ViewModels

<div class="m-4 d-flex flex-column align-items-center" style="gap: 1em;">
    <h3>@(BuildingID is null ? "Créer" : "Modifier") un bâtiment</h3>

    @if (VM.IsLoaded)
    {
        <EditForm Model="@VM.Building" OnValidSubmit="Click_SaveChanges">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="d-flex flex-column align-items-center" style="gap: 1.5em">
                <div class="shadow p-3 input-section">
                    <div class="input-box">
                        <label for="building-name">Nom</label>
                        <InputText id="building-name" @bind-Value=VM.Building.Name />
                    </div>
                </div>

                <div class="d-flex" style="gap: 1em;">
                    <button type="submit" class="btn btn-success">@(BuildingID is null ? "Créer" : "Modifier")</button>
                    @if(BuildingID is not null)
                    {
                        <button type="button" class="btn btn-danger" @onclick=Click_DeleteBuilding>Supprimer</button>
                    }
                </div>
            </div>
        </EditForm>
    }
</div>

<CModal @ref="_deleteBuildingModal">
    <Title>Supprimer le bâtiment ?</Title>
    <Content>
        <p>
            Êtes-vous sûr de vouloir supprimer le bâtiment ?
            <br />
            - <b>@VM.Building.Name</b>
        </p>
    </Content>
    <Buttons>
        <button class="btn btn-danger" @onclick="Click_DeleteBuildingConfirmed">Supprimer</button>
        <button class="btn btn-secondary" @onclick="_deleteBuildingModal.Close">Annuler</button>
    </Buttons>
</CModal>

@inject IService<Building> buildingService;
@inject NavigationManager NavigationManager;
@inject ToastService ToastService;
@code {
    public BuildingCreatorVM VM { get; set; }

    [SupplyParameterFromQuery]
    public int? BuildingID { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        VM = new(buildingService);

        try{await VM.Load(BuildingID);}
        catch (Exception e) { ToastService.NewFromException(e); }
    }

    public async Task Click_SaveChanges()
    {
        try{
            await VM.SaveBuilding();
            ExitPage();
        }
        catch(Exception e){ ToastService.NewFromException(e); }
    }

    // Delete building modal
    private CModal _deleteBuildingModal;
    public void Click_DeleteBuilding()
    {
        _deleteBuildingModal.Open();
    }
    public async Task Click_DeleteBuildingConfirmed()
    {
        _deleteBuildingModal.Close();

        try{
            await VM.Delete();
            ExitPage();
        }
        catch(Exception e){ ToastService.NewFromException(e); }
    }

    private void ExitPage()
    {
        NavigationManager.NavigateTo("/");
    }
}
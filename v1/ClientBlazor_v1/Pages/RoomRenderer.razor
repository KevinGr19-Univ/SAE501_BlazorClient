@page "/"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.ViewModels
@using ClientBlazor_v1.ViewModels.Utils

<PageTitle>Room Renderer</PageTitle>

<div id="renderer_container">

    <canvas id="renderer" touch-action="none"></canvas>

    <div class="renderer_ui align-items-start">
        <FWindow CloseButton="false">
            <Header>
                <span>Salle D360</span>
            </Header>
            <Content>
                <FSubWindow>
                    <Header><span>Actions</span></Header>
                    <Content>
                        <button class="button_add" @onclick=ClickAddSensor>Ajouter un capteur</button>
                    </Content>
                </FSubWindow>
            </Content>
        </FWindow>
    </div>

    <div class="renderer_ui align-items-end">
        @foreach(var sceneObjectVM in SceneObjectVMs)
        {
            @if(sceneObjectVM is SensorVM sensorVM)
            {
                <SensorComponent SensorVM="sensorVM" OnClose=@(() => RemoveInterop(sceneObjectVM))></SensorComponent>
            }
        }
    </div>
</div>

@inject IJSRuntime JS
@code{
    public Scene Scene;
    public List<IJSObjectVM> SceneObjectVMs = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/scene.js");
            Scene = new Scene();
            Scene.JSObj = await module.InvokeAsync<IJSInProcessObjectReference>("getScene");
            Scene.OnElementSelected += OnElementSelected;

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ClickAddSensor()
    {
        var sensorVM = Scene.CreateSensor();
        SceneObjectVMs.Add(sensorVM);

        sensorVM.Transform.PosX = 2;
    }

    private void OnElementSelected(object? sender, Scene.OnElementSelectedEventArgs e)
    {
        if (!SceneObjectVMs.Contains(e.SceneObjectVM))
        {
            SceneObjectVMs.Add(e.SceneObjectVM);
            StateHasChanged();
        }
    }

    private void RemoveInterop(IJSObjectVM sceneObjectVM)
    {
        SceneObjectVMs.Remove(sceneObjectVM);
    }
}
@page "/renderer"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Components.RoomView
@using ClientBlazor_v1.Components.Utils
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Models.RoomObjects
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.Utils
@using ClientBlazor_v1.ViewModels.JS
@using ClientBlazor_v1.ViewModels.JS.RoomObject

<PageTitle>Salle 3D</PageTitle>

<div id="renderer_container">

    <canvas id="renderer" touch-action="none"></canvas>

    <div class="renderer_ui" style="left: 0;">
        @if(RoomSceneVM is not null)
        {
            <FWindow CloseButton="false">
                <Header>
                    <span>@(RoomSceneVM.Room?.Name ?? "Chargement...")</span>
                </Header>
                <Content>
                    <FSubWindow>
                        <Header><span>Objets</span></Header>
                        <Content>
                            @{
                                RoomObjectSorter<RoomObjectVM> sortedVMs = RoomObjectSorter<RoomObjectVM>.SortObjects(RoomSceneVM.ObjectVMs, (vm) => vm.RoomObject);
                            }

                            @foreach(var section in new[]{
                                new{ Title = "Capteurs", VMs = sortedVMs.Sensors },
                                new{ Title = "Actionneurs", VMs = sortedVMs.Actionnables },
                                new{ Title = "Equipements", VMs = sortedVMs.Equipments },
                            }){
                                <span><b>@(section.Title)</b> (@(section.VMs.Count))</span>
                                @if(section.VMs.Count > 0)
                                {
                                    <ul>
                                        @foreach(var roomObjectVM in section.VMs)
                                        {
                                            <li class="objectLink @(RoomSceneVM.VisibleObjectVMs.Contains(roomObjectVM) ? "isVisible" : "")" 
                                            @onclick=roomObjectVM.Select>@roomObjectVM.RoomObject.GetName()</li>
                                        }
                                    </ul>
                                }
                            }
                        </Content>
                    </FSubWindow>
                </Content>
            </FWindow>
        }
    </div>

    <div class="renderer_ui" style="right: 0;">
        @if(RoomSceneVM is not null)
        {
            @foreach(var objVM in RoomSceneVM.VisibleObjectVMs)
            {
                @if(objVM is DoorVM doorVM) { <DoorEditor VM="doorVM"></DoorEditor> }
                else if(objVM is SensorVM sensorVM) { <SensorEditor VM="sensorVM"></SensorEditor> }
            }
        }
    </div>
</div>

@inject IJSRuntime JS
@inject IAPIService api
@inherits UIUpdatableComponent
@code{
    [SupplyParameterFromQuery]
    public Guid RoomGuid { get; set; }

    public RoomSceneVM RoomSceneVM { get; set; } = null;
    public override IUpdateUI Updatable => RoomSceneVM;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/roomScene.js");
            var sceneObj = await module.InvokeAsync<IJSInProcessObjectReference>("getScene");

            RoomSceneVM = new RoomSceneVM(api, sceneObj);
            TryBind();
            UpdateUI();

            await RoomSceneVM.LoadRoom(RoomGuid);
        }
    }

}
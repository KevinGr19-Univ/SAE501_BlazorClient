@page "/renderer"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Components.RoomView
@using ClientBlazor_v1.Components.Utils
@using ClientBlazor_v1.Models
@using ClientBlazor_v1.Models.RoomObjects
@using ClientBlazor_v1.Services
@using ClientBlazor_v1.Utils
@using ClientBlazor_v1.ViewModels.JS
@using ClientBlazor_v1.ViewModels.JS.RoomObjects

<PageTitle>Salle 3D</PageTitle>

<div id="renderer_container">

    <canvas id="renderer" touch-action="none"></canvas>

    @if(RoomSceneVM is not null){
        <div class="renderer_navbar">
            <div class="renderer_navbar_btn" @onclick=RoomSceneVM.SetGizmoPos title="Translation"><img src="images/move.png"/></div>
            <div class="renderer_navbar_btn" @onclick=RoomSceneVM.SetGizmoRot title="Rotation"><img src="images/rotate.png" /></div>
            <div class="renderer_navbar_btn" @onclick=RoomSceneVM.SetGizmoScale title="Taille"><img src="images/scale.png" /></div>
            <div class="renderer_navbar_btn" @onclick=RoomSceneVM.SetFocusToSelected title="Centrer vers l'objet sélectionné"><img src="images/focus_element.png" /></div>
            <div class="renderer_navbar_btn" @onclick=RoomSceneVM.SetFocusToCenter title="Centrer vers l'origine"><img src="images/focus_world.png" /></div>
            <Compass VM="RoomSceneVM.CompassVM" OrientationOffset="RoomSceneVM.Room?.NorthOrientation ?? 0"></Compass>
        </div>
    }

    <div class="renderer_ui" style="left: 0;">
        @if(RoomSceneVM is not null)
        {
            <FWindow CloseButton="false">
                <Header>
                    <span>@(RoomSceneVM.Room?.Name ?? "Chargement...")</span>
                </Header>
                <Content>
                    <FSubWindow>
                        <Header><span>Objets</span></Header>
                        <Content>
                            @{
                                RoomObjectSorter<RoomObjectVM> sortedVMs = RoomObjectSorter<RoomObjectVM>.SortObjects(RoomSceneVM.ObjectVMs, (vm) => vm.Object);
                            }

                            @foreach(var section in new[]{
                                new{ Title = "Capteurs", VMs = sortedVMs.Sensors },
                                new{ Title = "Actionneurs", VMs = sortedVMs.Actionnables },
                                new{ Title = "Equipements", VMs = sortedVMs.Equipments },
                            }){
                                <span><b>@(section.Title)</b> (@(section.VMs.Count))</span>
                                @if(section.VMs.Count > 0)
                                {
                                    <ul>
                                        @foreach(var roomObjectVM in section.VMs)
                                        {
                                            <li class="objectLink @(RoomSceneVM.VisibleObjectVMs.Contains(roomObjectVM) ? "isVisible" : "")" 
                                            @onclick=roomObjectVM.Select>@roomObjectVM.Object.GetFullName()</li>
                                        }
                                    </ul>
                                }
                            }
                        </Content>
                    </FSubWindow>
                    <FSubWindow>
                        <Header><span>Actions</span></Header>
                        <Content>
                            <button @onclick=_addObjectModal.Open>Ajouter un équipement</button>
                            <button style="background: green" @onclick=Click_SaveChanges>Sauvegarder</button>
                        </Content>
                    </FSubWindow>
                </Content>
            </FWindow>
        }
    </div>

    <div class="renderer_ui" style="right: 0;">
        @if(RoomSceneVM is not null)
        {
            @foreach(var objVM in RoomSceneVM.VisibleObjectVMs)
            {
                <RoomObjectEditor VM=objVM></RoomObjectEditor>
            }
        }
    </div>

    <Modal @ref=_saveChangesModal>
        <Title>Sauvegarder les changements</Title>
        <Content>
            <p>Voulez-vous sauvegarder tous les changements ?</p>
        </Content>
        <Buttons>
            <button type="button" class="btn btn-success" @onclick=Click_SaveChangesConfirmed>Sauvegarder</button>
            <button type="button" class="btn btn-secondary" @onclick=_saveChangesModal.Close>Annuler</button>
        </Buttons>
    </Modal>

    <Modal @ref=_abortChangesModal>
        <Title>Quitter ?</Title>
        <Content>
            <p>Êtes-vous sûr de vouloir quitter ?</p>
        </Content>
        <Buttons>
            <button type="button" class="btn btn-danger" @onclick=Click_AbortChangesConfirmed>Quitter</button>
            <button type="button" class="btn btn-secondary" @onclick=_abortChangesModal.Close>Annuler</button>
        </Buttons>
    </Modal>

    <Modal @ref=_addObjectModal OnClose="OnClose_AbortModal">
        <Title>Ajouter un équipement</Title>
        <Content>
            <div class="input-box">
                <label for="room-building">Type</label>
                <InputSelect id="room-building" @bind-Value="RoomSceneVM.RoomObjectType_SelectedIndex" class="form-select">
                    <option value="-1">- Séléctionnez le type de nouvel objet -</option>
                    @{
                        int i = 0;
                        foreach (var type in RoomSceneVM.InputSelect_RoomObjectTypes)
                        {
                            <option value="@(i++)">@type.GetRootName()</option>
                        }
                    }
                </InputSelect>
            </div>
        </Content>
        <Buttons>
            @if(RoomSceneVM.RoomObjectType_Selected is not null)
            {
                <button type="button" class="btn btn-primary" @onclick="Click_AddObject">Ajouter</button>
            }
            <button type="button" class="btn btn-secondary" @onclick=_addObjectModal.Close>Annuler</button>
        </Buttons>
    </Modal>
</div>

<script>
    window.onbeforeunload = function() {
    return "Êtes-vous sûr de vouloir quitter ?";
    }

    function removeAbortMessage(){
    window.onbeforeunload = () => {};
    }
</script>

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IService<Room> roomService
@inherits UIUpdatableComponent
@code{
    [SupplyParameterFromQuery]
    public int RoomId { get; set; }

    public RoomSceneVM RoomSceneVM { get; set; }
    public override IUpdateUI Updatable => RoomSceneVM;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/roomScene.js");
            var sceneObj = await module.InvokeAsync<IJSInProcessObjectReference>("getScene");

            RoomSceneVM = new(roomService, sceneObj);

            TryBind();
            UpdateUI();

            await RoomSceneVM.LoadRoom(RoomId);
            _locationChangingHandler = NavigationManager.RegisterLocationChangingHandler(LocationChangingHandler);
        }
    }

    // Add object modal
    private Modal _addObjectModal;
    public void Click_AddObject()
    {
        _addObjectModal.Close();
        RoomSceneVM.AddNewOfSelectedRoomObjectType();
    }

    // Save modal
    private Modal _saveChangesModal;
    public void Click_SaveChanges() => _saveChangesModal.Open();
    public void Click_SaveChangesConfirmed()
    {
        _saveChangesModal.Close();
    }

    // Abort modal
    private Modal _abortChangesModal;
    private IDisposable _locationChangingHandler;
    private TaskCompletionSource<bool> _locationChangingTask;

    public void Click_AbortChangesConfirmed() => _locationChangingTask?.SetResult(true);
    public void OnClose_AbortModal() => _locationChangingTask?.SetResult(false);
    public async ValueTask LocationChangingHandler(LocationChangingContext context)
    {
        _abortChangesModal.Open();
        await InvokeAsync(StateHasChanged);

        _locationChangingTask = new();
        bool abort = await _locationChangingTask.Task;
        _locationChangingTask = null;

        if (!abort){
            context.PreventNavigation();
            return;
        }

        await JS.InvokeVoidAsync("removeAbortMessage");
    }
    // END

    public override void Dispose()
    {
        _locationChangingHandler.Dispose();
        base.Dispose();
    }
}
@page "/"
@using ClientBlazor_v1.Components
@using ClientBlazor_v1.Interop
@using ClientBlazor_v1.Interop.Utils
@using ClientBlazor_v1.Models

<PageTitle>Room Renderer</PageTitle>

<div id="renderer_container">

    <canvas id="renderer" touch-action="none"></canvas>

    <div class="renderer_ui align-items-start">
        <FWindow CloseButton="false">
            <Header>
                <span>Salle D360</span>
            </Header>
            <Content>
                <FSubWindow>
                    <Header><span>Actions</span></Header>
                    <Content>
                        <button class="button_add" @onclick=ClickAddCapteur>Ajouter un capteur</button>
                        <button class="button_add" @onclick=ClickAddPorte>Ajouter une porte</button>
                    </Content>
                </FSubWindow>
            </Content>
        </FWindow>
    </div>

    <div class="renderer_ui align-items-end">
        @foreach(var interop in Interops)
        {
            @if(interop is CapteurInterop capteurInterop)
            {
                <CapteurVM CapteurInterop="capteurInterop" OnClose=@(() => RemoveInterop(capteurInterop))></CapteurVM>
            }
            else if(interop is PorteInterop porteInterop)
            {
                <PorteVM PorteInterop="porteInterop" OnClose="@(() => RemoveInterop(porteInterop))"></PorteVM>
            }
        }
    </div>
</div>

@inject IJSRuntime JS
@code{
    public Scene Scene;
    public List<BaseInterop> Interops = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/scene.js");
            Scene = new Scene(await module.InvokeAsync<IJSInProcessObjectReference>("getScene"));
            Scene.OnElementSelected += OnElementSelected;

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ClickAddCapteur()
    {
        var capteurInterop = Scene.AddCapteur();
        Interops.Add(capteurInterop);
    }

    public async Task ClickAddPorte()
    {
        var porteInterop = Scene.AddPorte();
        Interops.Add(porteInterop);
    }

    private void OnElementSelected(object? sender, Scene.OnElementSelectedEventArgs e)
    {
        if (!Interops.Contains(e.Element))
        {
            Interops.Add(e.Element);
            StateHasChanged();
        }
    }

    private void RemoveInterop(BaseInterop interop)
    {
        Interops.Remove(interop);
    }
}